<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.chuanshen.devladder.mapper.EmpMapper">
    <resultMap id="BaseResultMap" type="org.chuanshen.devladder.model.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="birthday" property="birthday"/>
        <result column="idCard" property="idCard"/>
        <result column="wedlock" property="wedlock"/>
<!--        <result column="nationId" property="nationId"/>-->
        <result column="nativePlace" property="nativePlace"/>
<!--        <result column="politicId" property="politicId"/>-->
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="address" property="address"/>
<!--        <result column="departmentId" property="departmentId"/>-->
<!--        <result column="jobLevelId" property="jobLevelId"/>-->
<!--        <result column="posId" property="posId"/>-->
        <result column="engageForm" property="engageForm"/>
        <result column="tiptopDegree" property="tiptopDegree"/>
        <result column="specialty" property="specialty"/>
        <result column="school" property="school"/>
        <result column="beginDate" property="beginDate"/>
        <result column="workState" property="workState"/>
        <result column="workID" property="workID"/>
        <result column="contractTerm" property="contractTerm"/>
        <result column="conversionTime" property="conversionTime"/>
        <result column="notWorkDate" property="notWorkDate"/>
        <result column="beginContract" property="beginContract"/>
        <result column="endContract" property="endContract"/>
        <result column="workAge" property="workAge"/>
        <association property="nation" javaType="org.chuanshen.devladder.model.Nation">
            <id property="id" column="nation.id"/>
            <result property="name" column="nation.name"/>
        </association>
        <association property="politicsStatus" javaType="org.chuanshen.devladder.model.PoliticsStatus">
            <id property="id" column="politicsStatus.id"/>
            <result property="name" column="politicsStatus.name"/>
        </association>
        <association property="department" javaType="org.chuanshen.devladder.model.Department">
            <id property="id" column="department.id"/>
            <result property="name" column="department.name"/>
        </association>
        <association property="jobLevel" javaType="org.chuanshen.devladder.model.JobLevel">
            <id property="id" column="jobLevel.id"/>
            <result property="name" column="jobLevel.name"/>
            <result property="titleLevel" column="jobLevel.titleLevel"/>
        </association>
        <association property="position" javaType="org.chuanshen.devladder.model.Position">
            <id property="id" column="position.id"/>
            <result property="name" column="position.name"/>
        </association>
        <association property="salary" javaType="org.chuanshen.devladder.model.Salary">
            <id column="sid" jdbcType="INTEGER" property="id" />
            <result column="bonus" jdbcType="INTEGER" property="bonus" />
            <result column="lunchSalary" jdbcType="INTEGER" property="lunchSalary" />
            <result column="trafficSalary" jdbcType="INTEGER" property="trafficSalary" />
            <result column="basicSalary" jdbcType="INTEGER" property="basicSalary" />
            <result column="allSalary" jdbcType="INTEGER" property="allSalary" />
            <result column="pensionBase" jdbcType="INTEGER" property="pensionBase" />
            <result column="pensionPer" jdbcType="REAL" property="pensionPer" />
            <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
            <result column="medicalBase" jdbcType="INTEGER" property="medicalBase" />
            <result column="medicalPer" jdbcType="REAL" property="medicalPer" />
            <result column="accumulationFundBase" jdbcType="INTEGER" property="accumulationFundBase" />
            <result column="accumulationFundPer" jdbcType="REAL" property="accumulationFundPer" />
            <result column="sname" jdbcType="VARCHAR" property="name" />
        </association>
    </resultMap>

    <sql id="baseColumnList">
       e.`id`             AS "id",
       e.`name`           AS "name",
       e.`gender`         AS "gender",
       e.`birthday`       AS "birthday",
       e.`idCard`         AS "idCard",
       e.`wedlock`        AS "wedlock",
       e.`nationId`       AS "nationId",
       e.`nativePlace`    AS "nativePlace",
       e.`politicId`      AS "politicId",
       e.`email`          AS "email",
       e.`phone`          AS "phone",
       e.`address`        AS "address",
       e.`departmentId`   AS "departmentId",
       e.`jobLevelId`     AS "jobLevelId",
       e.`posId`          AS "posId",
       e.`engageForm`     AS "engageForm",
       e.`tiptopDegree`   AS "tiptopDegree",
       e.`specialty`      AS "specialty",
       e.`school`         AS "school",
       e.`beginDate`      AS "beginDate",
       e.`workState`      AS "workState",
       e.`workID`         AS "workID",
       e.`contractTerm`   AS "contractTerm",
       e.`conversionTime` AS "conversionTime",
       e.`notWorkDate`    AS "notWorkDate",
       e.`beginContract`  AS "beginContract",
       e.`endContract`    AS "endContract",
       e.`workAge`        AS "workAge"
    </sql>

    <select id="getEmployeeByPage" resultMap="BaseResultMap">
        SELECT
            <include refid="baseColumnList"></include>,
            n.`id`             AS "nation.id",
            n.`name`           AS "nation.name",
            ps.`id`            AS "politicsStatus.id",
            ps.`name`          AS "politicsStatus.name",
            d.`id`             AS "department.id",
            d.`name`           AS "department.name",
            jl.`id`            AS "jobLevel.id",
            jl.`name`          AS "jobLevel.name",
            jl.`titleLevel`    AS "jobLevel.titleLevel",
            p.`id`             AS "position.id",
            p.`name`           AS "position.name"
        FROM employee e
            LEFT JOIN nation n ON e.`nationId` = n.`id`
            LEFT JOIN politicsstatus ps ON e.`politicId` = ps.`id`
            LEFT JOIN department d ON e.`departmentId` = d.id
            LEFT JOIN joblevel jl ON e.`jobLevelId` = jl.`id`
            LEFT JOIN position p ON e.`posId` = p.`id`
        <where>
            <if test="keyword != null and keyword != ''">
                AND e.`name` LIKE CONCAT('%', #{keyword}, '%')
            </if>
        </where>
        LIMIT #{page}, #{size}
<!--        WHERE e.`name` like concat('%', #{keywords}, '%')-->
<!--        <if test="engageForm!=null and engageForm!=''">-->
<!--            AND e.engageForm=#{engageForm}-->
<!--        </if>-->
<!--        <if test="politicId!=null and politicId!=''">-->
<!--            AND e.politicId=#{politicId}-->
<!--        </if>-->
<!--        <if test="nationId!=null and nationId!=''">-->
<!--            AND e.nationId=#{nationId}-->
<!--        </if>-->
<!--        <if test="posId!=null and posId!=''">-->
<!--            AND e.posId=#{posId}-->
<!--        </if>-->
<!--        <if test="jobLevelId!=null and jobLevelId!=''">-->
<!--            AND e.jobLevelId=#{jobLevelId}-->
<!--        </if>-->
<!--        <if test="departmentId!=null and departmentId!=''">-->
<!--            AND e.departmentId=#{departmentId}-->
<!--        </if>-->
<!--        <if test="startBeginDate!=null and endBeginDate!=null">-->
<!--            AND e.beginDate BETWEEN #{startBeginDate} AND #{endBeginDate}-->
<!--        </if>-->
<!--        <if test="start!=null and size!=null">-->
<!--            order by e.id limit #{start},#{size}-->
<!--        </if>-->
    </select>

    <select id="getTotal" resultType="Long">
        SELECT COUNT(*) FROM employee e
        <where>
            <if test="keyword != null and keyword != ''">
                AND e.`name` LIKE CONCAT('%', #{keyword}, '%')
            </if>
        </where>;
    </select>

    <select id="getEmployeeByPageShort" resultMap="BaseResultMap">
select e.*,d.`id` as did,d.`name` as dname,s.`id` as sid,s.`accumulationFundBase`,s.`accumulationFundPer`,s.`allSalary`,s.`basicSalary`,s.`bonus`,s.`createDate`,s.`lunchSalary`,s.`medicalBase`,s.`medicalPer`,s.`name` as sname,s.`pensionBase`,s.`pensionPer`,s.`trafficSalary` from employee e left join department d on e.`departmentId`=d.id left join empsalary es on es.`eid`=e.`id` left join salary s on s.`id`=es.`sid` ORDER BY e.id limit #{start},#{size}
    </select>
    <select id="getAllNations" resultType="org.chuanshen.devladder.model.Nation">
        select * from nation;
    </select>
    <select id="getAllPolitics" resultType="org.chuanshen.devladder.model.PoliticsStatus">
        select * from politicsstatus;
    </select>
    <insert id="addEmp" parameterType="org.chuanshen.devladder.model.Employee">
            insert into employee (name, gender,
      birthday, idCard, wedlock, nationId,
      nativePlace, politicId, email,
      phone, address, departmentId,
      jobLevelId, posId, engageForm,
      tiptopDegree, specialty, school,
      beginDate,workID,
      contractTerm, conversionTime,
      beginContract, endContract, workAge
      )
    values (#{name,jdbcType=VARCHAR}, #{gender,jdbcType=CHAR},
      #{birthday,jdbcType=DATE}, #{idCard,jdbcType=CHAR}, #{wedlock,jdbcType=CHAR}, #{nationId,jdbcType=INTEGER},
      #{nativePlace,jdbcType=VARCHAR}, #{politicId,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR},
      #{phone,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{departmentId,jdbcType=INTEGER},
      #{jobLevelId,jdbcType=INTEGER}, #{posId,jdbcType=INTEGER}, #{engageForm,jdbcType=VARCHAR},
      #{tiptopDegree,jdbcType=VARCHAR}, #{specialty,jdbcType=VARCHAR}, #{school,jdbcType=VARCHAR},
      #{beginDate,jdbcType=DATE},#{workID,jdbcType=BIGINT},
      #{contractTerm,jdbcType=BIGINT}, #{conversionTime,jdbcType=DATE},
      #{beginContract,jdbcType=DATE}, #{endContract,jdbcType=DATE}, #{workAge,jdbcType=INTEGER}
      )
    </insert>
    <select id="getMaxWorkID" resultType="Long">
        SELECT workID from employee where id=(select max(id) from employee)
    </select>
    <select id="getCountByKeywords" resultType="Long">
        SELECT count(*) FROM employee e WHERE e.name LIKE concat('%',#{keywords},'%')
        <if test="engageForm!=null and engageForm!=''">
            AND e.engageForm=#{engageForm}
        </if>
        <if test="politicId!=null and politicId!=''">
            AND e.politicId=#{politicId}
        </if>
        <if test="nationId!=null and nationId!=''">
            AND e.nationId=#{nationId}
        </if>
        <if test="posId!=null and posId!=''">
            AND e.posId=#{posId}
        </if>
        <if test="jobLevelId!=null and jobLevelId!=''">
            AND e.jobLevelId=#{jobLevelId}
        </if>
        <if test="departmentId!=null and departmentId!=''">
            AND e.departmentId=#{departmentId}
        </if>
        <if test="startBeginDate!=null and endBeginDate!=null">
            AND e.beginDate BETWEEN #{startBeginDate} AND #{endBeginDate}
        </if>
    </select>
    <update id="updateEmp">
        update employee
        <set>
            <if test="emp.name != null">
                name = #{emp.name,jdbcType=VARCHAR},
            </if>
            <if test="emp.gender != null">
                gender = #{emp.gender,jdbcType=CHAR},
            </if>
            <if test="emp.birthday != null">
                birthday = #{emp.birthday,jdbcType=DATE},
            </if>
            <if test="emp.idCard != null">
                idCard = #{emp.idCard,jdbcType=CHAR},
            </if>
            <if test="emp.wedlock != null">
                wedlock = #{emp.wedlock,jdbcType=CHAR},
            </if>
            <if test="emp.nationId != null">
                nationId = #{emp.nationId,jdbcType=INTEGER},
            </if>
            <if test="emp.nativePlace != null">
                nativePlace = #{emp.nativePlace,jdbcType=VARCHAR},
            </if>
            <if test="emp.politicId != null">
                politicId = #{emp.politicId,jdbcType=INTEGER},
            </if>
            <if test="emp.email != null">
                email = #{emp.email,jdbcType=VARCHAR},
            </if>
            <if test="emp.phone != null">
                phone = #{emp.phone,jdbcType=VARCHAR},
            </if>
            <if test="emp.address != null">
                address = #{emp.address,jdbcType=VARCHAR},
            </if>
            <if test="emp.departmentId != null">
                departmentId = #{emp.departmentId,jdbcType=INTEGER},
            </if>
            <if test="emp.jobLevelId != null">
                jobLevelId = #{emp.jobLevelId,jdbcType=INTEGER},
            </if>
            <if test="emp.posId != null">
                posId = #{emp.posId,jdbcType=INTEGER},
            </if>
            <if test="emp.engageForm != null">
                engageForm = #{emp.engageForm,jdbcType=VARCHAR},
            </if>
            <if test="emp.tiptopDegree != null">
                tiptopDegree = #{emp.tiptopDegree,jdbcType=CHAR},
            </if>
            <if test="emp.specialty != null">
                specialty = #{emp.specialty,jdbcType=VARCHAR},
            </if>
            <if test="emp.school != null">
                school = #{emp.school,jdbcType=VARCHAR},
            </if>
            <if test="emp.beginDate != null">
                beginDate = #{emp.beginDate,jdbcType=DATE},
            </if>
            <if test="emp.workState != null">
                workState = #{emp.workState,jdbcType=CHAR},
            </if>
            <if test="emp.contractTerm != null">
                contractTerm = #{emp.contractTerm,jdbcType=DOUBLE},
            </if>
            <if test="emp.conversionTime != null">
                conversionTime = #{emp.conversionTime,jdbcType=DATE},
            </if>
            <if test="emp.notWorkDate != null">
                notWorkDate = #{emp.notWorkDate,jdbcType=DATE},
            </if>
            <if test="emp.beginContract != null">
                beginContract = #{emp.beginContract,jdbcType=DATE},
            </if>
            <if test="emp.endContract != null">
                endContract = #{emp.endContract,jdbcType=DATE},
            </if>
        </set>
        where id = #{emp.id,jdbcType=BIGINT}
    </update>
    <delete id="deleteEmpById">
        DELETE FROM employee WHERE id IN
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </delete>
    <insert id="addEmps">
        insert into employee (name, gender,
        birthday, idCard, wedlock, nationId,
        nativePlace, politicId, email,
        phone, address, departmentId,
        jobLevelId, posId, engageForm,
        tiptopDegree, specialty, school,
        beginDate,workID,
        contractTerm, conversionTime,
        beginContract, endContract, workAge
        )
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.name,jdbcType=VARCHAR}, #{emp.gender,jdbcType=CHAR},
            #{emp.birthday,jdbcType=DATE}, #{emp.idCard,jdbcType=CHAR}, #{emp.wedlock,jdbcType=CHAR},
            #{emp.nationId,jdbcType=BIGINT},
            #{emp.nativePlace,jdbcType=VARCHAR}, #{emp.politicId,jdbcType=BIGINT}, #{emp.email,jdbcType=VARCHAR},
            #{emp.phone,jdbcType=VARCHAR}, #{emp.address,jdbcType=VARCHAR}, #{emp.departmentId,jdbcType=BIGINT},
            #{emp.jobLevelId,jdbcType=BIGINT}, #{emp.posId,jdbcType=BIGINT}, #{emp.engageForm,jdbcType=VARCHAR},
            #{emp.tiptopDegree,jdbcType=VARCHAR}, #{emp.specialty,jdbcType=VARCHAR}, #{emp.school,jdbcType=VARCHAR},
            #{emp.beginDate,jdbcType=DATE},#{emp.workID,jdbcType=BIGINT},
            #{emp.contractTerm,jdbcType=BIGINT}, #{emp.conversionTime,jdbcType=DATE},
            #{emp.beginContract,jdbcType=DATE}, #{emp.endContract,jdbcType=DATE}, #{emp.workAge,jdbcType=INTEGER}
            )
        </foreach>
    </insert>
</mapper>